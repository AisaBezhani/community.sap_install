---
# 1. Role arguments are validated through meta/arguments_spec.yml (ansible >= 2.11)
# 2. Detect SAP solution to be configured (scale-up, scale-out, etc.)
#    * Play hosts must have SAP installed and landscape information discoverable ?!
# 3. Include tasks for parameter validation for the selected solution
#    * Certain parameters must match the target solution
#      (networking, IDs, number of nodes)
# 4. Include tasks for building the ha_cluster arguments for the selected solution
#    * scale-up, scale-out, scale-up + mtr, scale-out + mtr
# 5. Include ha_cluster role with the constructed parameters as role arguments
# 6. Add solution specific config
#    * srhook
# 7. Save 'ha_cluster' input parameters in .yml file for easy re-use

# TODO: Build all resource/constraint configuration variables based on
# simpler user input (think: drop-down options in a UI)
# - Make resources configuration modular, allowing additional VIPs, for example

# TODO: create CIB backup before running ha_cluster

# TODO: add parameter to just construct ha_cluster input variables and display the output
# use-case: users can extract the parameters to add them to their variable files
# and re-use ha_cluster with a complete set of configuration definitions

# The SAP ID must follow a strict format and not use reserved special values
# TODO: This check may be better placed in a SAP role earlier in the chain...
- name: "{{ __tname }} Validate SAP System ID"
  ansible.builtin.assert:
    that:
      - sap_ha_cluster_hana_sid is defined
      - sap_ha_cluster_hana_sid|length == 3
      - sap_ha_cluster_hana_sid not in __sap_sid_prohibited
  tags: always

# Make sure that all parameters already set for 'ha_cluster' are also inherited.
# Add to the include file a task for each parameter which this SAP cluster role
# supports.
- name: "{{ __tname }} Include tasks for checking 'ha_cluster' predefinitions"
  ansible.builtin.include_tasks:
    file: ascertain_ha_cluster_in_inventory.yml
    apply:
      tags: always
  tags: always

# Determine which SAP landscape we are going to configure in the cluster.
# This is needed to include the landscape specific parameter values.
# The result will be parameters:
# - sap_ha_cluster_sap_type (values: scaleup, scaleout)
# - sap_ha_cluster_replication_type (values: mtr, ?)
- name: "{{ __tname }} Include tasks for SAP landscape calculation"
  ansible.builtin.include_tasks:
    file: ascertain_sap_landscape.yml
    apply:
      tags: check_sap
  tags: check_sap

# Determine if we are on a cloud platform.
- name: "{{ __tname }} Include tasks for platform detection"
  ansible.builtin.include_tasks:
    file: ascertain_platform_type.yml
    apply:
      tags: check_platform
  tags: check_platform

# Include vars files based on the environment.
# Respect order for potential variable precedence.
- name: "{{ __tname }} Set platform/version specific variables"
  ansible.builtin.include_vars: "{{ __sap_ha_cluster_vars_file }}"
  loop:
    - "{{ ansible_facts['os_family'] }}.yml"
    - "{{ ansible_facts['distribution'] }}.yml"
    - >-
      {{ ansible_facts['distribution'] ~ '_' ~
      ansible_facts['distribution_major_version'] }}.yml
    - >-
      {{ ansible_facts['distribution'] ~ '_' ~
      ansible_facts['distribution_version'] }}.yml
    - "SAPHana_{{ sap_ha_cluster_sap_type }}.yml"
    - "SAPHana_{{ sap_ha_cluster_replication_type }}.yml"
    - "Platform_{{ __sap_ha_cluster_vm_asset_tag }}.yml"
  vars:
    __sap_ha_cluster_vars_file: "{{ role_path }}/vars/{{ item }}"
  when: __sap_ha_cluster_vars_file is file

- name: "{{ __tname }} Include common variable construction tasks"
  ansible.builtin.import_tasks: construct_vars_common.yml

- name: "{{ __tname }} Include variable construction for STONITH resources"
  ansible.builtin.import_tasks: construct_vars_stonith.yml

- name: "{{ __tname }} Include variable construction for SAP HANA common"
  ansible.builtin.include_tasks:
    file: construct_vars_hana_common.yml

- name: "{{ __tname }} Include variable construction for SAP HANA Scale-up"
  ansible.builtin.include_tasks:
    file: construct_vars_hana_scaleup.yml
  when: sap_ha_cluster_sap_type == 'scaleup'

- name: "{{ __tname }} Include variable construction for SAP HANA Scale-out"
  ansible.builtin.include_tasks:
    file: construct_vars_hana_scaleout.yml
  when: sap_ha_cluster_sap_type == 'scaleout'

#### for debugging
#- name: "Fail here for now..."
#  ansible.builtin.fail:

- name: "{{ __tname }} Block with actual changes"
  block:
    # Start with prerequisite changes for certain platforms, if applicable
    - name: "{{ __tname }} Include platform specific fencing prerequisites"
      ansible.builtin.include_tasks:
        file: "{{ item }}"
      loop:
        - "preconfigure_platform_{{ __sap_ha_cluster_platform_type }}.yml"
      vars:
        __sap_ha_cluster_platform_file: "{{ role_path }}/tasks/{{ item }}"
      when:
        - __sap_ha_cluster_platform_type is defined
        - __sap_ha_cluster_platform_file is file
      ignore_errors: "{{ ansible_check_mode }}"

    # Before we are ready to call the ha_cluster role, we want to validate
    # that the minimum required parameters are defined and not empty.
    # TODO: make this smarter, currently all these vars are pre-defined anyway
    - name: "{{ __tname }} Validate parameters for 'ha_cluster' role input"
      ansible.builtin.assert:
        that:
          - __sap_ha_cluster_cluster_properties is defined
          - __sap_ha_cluster_extra_packages is defined
          - __sap_ha_cluster_resource_primitives is defined
          - __sap_ha_cluster_resource_clones is defined
          - __sap_ha_cluster_constraints_order is defined
          - __sap_ha_cluster_constraints_colocation is defined
        fail_msg: "Cluster build parameter construction has failed for this parameter."

    - name: "{{ __tname }} Query if CIB already exists"
      ansible.builtin.command:
        cmd: cibadmin --query
      register: __sap_ha_cluster_cib_query
      check_mode: no
      changed_when: false
      failed_when: false

    - name: "{{ __tname }} Create backup of existing CIB"
      ansible.builtin.copy:
        backup: true
        content: "{{ __sap_ha_cluster_cib_query.stdout }}"
        dest: /root/cib_backup.xml
        group: root
        owner: root
        mode: 0600
      when:
        - __sap_ha_cluster_cib_query.stdout is defined
        - __sap_ha_cluster_cib_query.stdout|length > 0

    # Cluster installation and configuration through the dedicated
    # linux system role 'ha_cluster'
    - name: "{{ __tname }} Include System Role 'ha_cluster'"
      ansible.builtin.include_role:
        name: linux-system-roles.ha_cluster
        apply:
          tags: ha_cluster
          no_log: true
      vars:
        ha_cluster_cluster_name: "{{ __sap_ha_cluster_cluster_name }}"
        ha_cluster_hacluster_password: "{{ __sap_ha_cluster_hacluster_password }}"
        ha_cluster_cluster_properties: "{{ __sap_ha_cluster_cluster_properties }}"
        __ha_cluster_repos: "{{ __sap_ha_cluster_repos }}"
        ha_cluster_properties: "{{ __sap_ha_cluster_cluster_properties }}"
        ha_cluster_extra_packages: "{{ __sap_ha_cluster_extra_packages }}"
        ha_cluster_resource_primitives: "{{ __sap_ha_cluster_resource_primitives }}"
        ha_cluster_resource_clones: "{{ __sap_ha_cluster_resource_clones }}"
        ha_cluster_constraints_order: "{{ __sap_ha_cluster_constraints_order }}"
        ha_cluster_constraints_colocation: "{{ __sap_ha_cluster_constraints_colocation }}"
        ha_cluster_fence_agent_packages: "{{ __sap_ha_cluster_fence_agent_packages }}"
      no_log: true  # some parameters contain secrets
      tags: ha_cluster

    # Resource defaults can currently not be updated through ha_cluster
    # role parameters, and thus need to be added.
    - name: "{{ __tname }} Check resource defaults"
      ansible.builtin.command:
        cmd: pcs resource defaults config
      register: __sap_ha_cluster_check_resource_defaults
      run_once: true
      changed_when: false
      check_mode: no

    - name: "{{ __tname }} Update resource default values"
      ansible.builtin.command:
        cmd: pcs resource defaults update {{ item }}
      loop:
        - "resource-stickiness={{ sap_ha_cluster_resource_stickiness }}"
        - "migration-threshold={{ sap_ha_cluster_migration_threshold }}"
      run_once: true
      when:
        - item not in __sap_ha_cluster_check_resource_defaults.stdout

    - name: "{{ __tname }} Include srHook configuration"
      ansible.builtin.include_tasks:
        file: configure_srhook.yml
        apply:
          tags: srhook
      tags: srhook

### END OF BLOCK: prerequisite changes and cluster setup
  when:
    - not sap_ha_cluster_create_config_only

# Save all the constructed cluster parameters into a vars file.
#
# This will help re-using ha_cluster afterwards without loosing the already
# configured resources and constraints.
# The ha_cluster role will otherwise remove configuration that is not part
# of the parameters provided during any subsequent run outside of the current
# SAP system role.
#
# TODO: Deal with secrets in output. They should be masked, maybe with
# their user provided variables?

- name: "{{ __tname }} Create cluster configuration parameters file"
  ansible.builtin.template:
    backup: true
    dest: "{{ sap_ha_cluster_create_config_dest }}"
    mode: 0600
    src: cluster_create_config.j2
  delegate_to: localhost
  run_once: true
  become: false
  check_mode: no
  when:
    - sap_ha_cluster_create_config_dest is defined

- name: "{{ __tname }} Display configuration parameters SAVE FILE location"
  ansible.builtin.debug:
    msg: |
      The cluster resource configuration parameters have been saved here:
      >>>>>     {{ sap_ha_cluster_create_config_dest }}    <<<<<

      Please include these variable definitions if you run the 'ha_cluster'
      linux system role separately.
      !! Secret values of resources may be included in this output !!
  run_once: true
