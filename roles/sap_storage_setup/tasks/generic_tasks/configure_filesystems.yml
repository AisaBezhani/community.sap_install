---
- name: LVM - Create volume groups
  community.general.lvg:
    vg: "{{ vg_item.volume_group }}"
    state: present
    pvs: "{{ vg_item.device }}"
    pesize: "{{ vg_item.pesize }}"
    vg_options: "{{ vg_item.vg_opts }}"
    pv_options: "{{ vg_item.pv_opts }}"
  loop: "{{ volume_map }}"
  loop_control:
    loop_var: vg_item
    label: "{{ vg_item.volume_group }}"
#  when:
#    - vg_item.device | length > 0
#    - not vg_item.use_nfs

- name: LVM - Create volumes
  community.general.lvol:
    lv: "{{ lv_item.volume_name }}"
    vg: "{{ lv_item.volume_group }}"
    shrink: false
    size: 100%VG
    state: present
    opts: "{{ lv_item.lv_opts }}"
  loop: "{{ volume_map }}"
  loop_control:
    loop_var: lv_item
    label: "{{ lv_item.volume_name }}"
  when:
    - not ansible_check_mode
#    - lv_item.device | length > 0
#    - not lv_item.use_nfs

- name: Create filesystems
  community.general.filesystem:
    fstype: "{{ fs_item.filesystem_type }}"
    dev: "/dev/{{ fs_item.volume_group }}/{{ fs_item.volume_name }}"
  loop: "{{ volume_map }}"
  loop_control:
    loop_var: fs_item
    label: "{{ fs_item.volume_name }}"
  when:
    - not ansible_check_mode
#    - not fs_item.use_nfs
#    - not fs_item.use_swapfile


#- name: Block handling the swap file
#  block:
#
#    - name: Swap File - Check if {{ swap_file }} exists
#      ansible.builtin.stat:
#        path: "{{ swap_file }}"
#      register: check_swapfile
#
#    - name: Swap File - Allocate space for {{ swap_file }}
#      ansible.builtin.shell: |
#        fallocate -l {{ swap_size|int * 1024 }}MB {{ swap_file }}
#      when:
#        - not check_swapfile.stat.exists
#
#    - name: Swap File - Adjust permissions of {{ swap_file }}
#      ansible.builtin.file:
#        path: "{{ swap_file }}"
#        mode: 0600
#
#    - name: Swap File - (Re-)create and activate swap as {{ swap_file }}
#      ansible.builtin.shell: |
#        mkswap {{ swap_file }}
#        swapon {{ swap_file }}
#      when:
#        - not check_swapfile.stat.exists
#
#    - name: Swap File - Add fstab entry for {{ swap_file }}
#      ansible.posix.mount:
#        path: swap
#        src: "{{ swap_file }}"
#        fstype: swap
#        opts: defaults
#        state: present
#
#  # Block parameters
#  vars:
#    swap_file: /swapfile
#    swap_size: "{{ aws_host_specifications_dictionary[host_specification_plan][host_node].filesystem_swap.use_swapfile_size }}"
#  when:
#    - aws_host_specifications_dictionary[host_specification_plan][host_node].filesystem_swap.use_swapfile | default(false)
#
#
#- name: Block handling a swap partition filesystem
#  block:
#
#    - name: Swap Partition - Check if swap partition exists (static set to expected path /dev/vg_swap/lv_swap)
#      ansible.builtin.shell: |
#        swapon --show --noheadings | grep /dev/
#      ignore_errors: true
#      register: check_swap_partition
#
#    - name: Swap Partition - Create on LVM Logical Volume (static set to expected path /dev/vg_swap/lv_swap)
#      ansible.builtin.shell: |
#        swapoff /dev/vg_swap/lv_swap
#        mkswap /dev/vg_swap/lv_swap
#        swapon /dev/vg_swap/lv_swap
#      when:
#        - check_swap_partition.rc != 0
#
#    - name: Swap Partition - Add fstab entry (static set to expected path /dev/vg_swap/lv_swap)
#      ansible.posix.mount:
#        path: swap
#        src: /dev/vg_swap/lv_swap
#        fstype: swap
#        opts: defaults
#        state: present
#      when:
#        - check_swap_partition.rc != 0
#
#  # Block parameters
#  vars:
#    node_definition: "{{ aws_host_specifications_dictionary[host_specification_plan][host_node] }}"
#
#  # Block conditionals: only execute tasks when swap is a volume, not a file
#  when:
#    - node_definition.filesystem_swap is defined
#    - (node_definition.filesystem_swap.use_swapfile is not defined or
#      not node_definition.filesystem_swap.use_swapfile)
#    - hostvars[host_node].ansible_swaptotal_mb < (node_definition.filesystem_swap.disk_size * 1024)
#    # - '"swap" in node_definition.filesystem_swap.volume_name'
#
#### End of block: swap filesystem
#
#
- name: Create mountpoints, add fstab entries and mount
  ansible.posix.mount:
    path: "{{ mnt_item.mountpoint }}"
    src: "/dev/{{ mnt_item.volume_group }}/{{ mnt_item.volume_name }}"
    fstype: "{{ mnt_item.filesystem_type }}"
    state: mounted # performs fstab entry and mount
  loop: "{{ volume_map }}"
  loop_control:
    loop_var: mnt_item
    label: "{{ mnt_item.volume_name }}"
#  when:
#    - not mnt_item.use_nfs
#    - not mnt_item.use_swapfile
#    - not mnt_item.mountpoint == "swap"
