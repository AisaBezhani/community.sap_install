---

################
# Cloud Specific Pre-Tasks - call cloud specific pre tasks thru {{ sap_storage_cloud_type }}_main.yml
################

#- name: SAP Storage Setup - Preparation for '{{ sap_storage_cloud_type }}'
#  include_tasks: "{{ sap_storage_cloud_type }}_main.yml"



##########
# Creating a list of unused devices that match the requested filesystem sizes, using
# - custom definition: sap_storage_definition
# - ansible facts: ansible_devices
#
#########
- name: Make a list of unused disk devices of the requested sizes
  ansible.builtin.set_fact:
    available_devices: |
      {% set av_disks = [] %}
      {% set all_disks = (ansible_devices | dict2items) %}
      {% for disk in all_disks %}
        {%- for fs in sap_storage_definition %}
          {%- if disk.value.links.uuids | length == 0
              and disk.value.partitions | length == 0
              and (fs.disk_size | upper) in (disk.value.size | regex_replace('(\.\d+\s*)', '')) %}
            {%- set add_to_list = av_disks.append(disk) %}
          {%- endif %}
        {%- endfor %}
      {%- endfor %}
      {{ av_disks | items2dict }}

# !!
# If the DISK MATCHING syntax has changed in the above, it must also
# be adjusted in the next task
# !!

# This task assigns device names for each volume to be created.
# - custom definition: sap_storage_definition
# - ansible facts: ansible-devices

- name: Set fact for target filesystem device mapping
  ansible.builtin.set_fact:
    filesystem_device_map: |
      {% set device_map = [] %}
      {% set av_dev = (available_devices | dict2items) %}
      {% set assigned_dev = [] %}
      {% for fs in sap_storage_definition %}
      {% set matching_dev = [] %}

        {%- if (fs.disk_size is defined
          and ('nfs' not in fs.filesystem_type | default('xfs'))
          and ('swapfile' not in fs.filesystem_type | default('xfs'))) -%}

          {%- for dev in av_dev -%}
            {%- if (fs.disk_size | upper) in (dev.value.size | regex_replace('(\.\d+\s*)', ''))
                and dev.key not in assigned_dev
                and matching_dev | length < (fs.lvm_lv_stripes | d('1') | int) %}

                {%- set assigned = assigned_dev.append(dev.key) %}
                {%- set add = matching_dev.append('/dev/' + dev.key) %}

            {%- endif %}
          {%- endfor %}

        {%- endif %}

        {%- set extend = device_map.extend([
          {
            'device': matching_dev | join(','),
            'fstype': fs.filesystem_type | default('xfs'),
            'mountpoint': fs.mountpoint,
            'name': fs.name,
            'size': fs.disk_size,
          }
          ]) %}
      {%- endfor %}
      {{ device_map }}


- debug:
    var: filesystem_device_map
#- fail:


# This task combines information to create a mapping list of devices to filesystems.
# Sources:
# - Extravars definition: sap_storage_definition
# - Ansible host facts: hostvars[host_node].ansible_devices
- name: MAPPING - Set fact for device to filesystem mapping
  ansible.builtin.set_fact:
    volume_map: "{{ volume_map + volume_element }}"
  vars:
    volume_map: []
    volume_element:
      - filesystem_type: |-
          {% if map_item.name == 'swap' -%}
            swap
          {%- else -%}
            {{ map_item.filesystem_type | default('xfs') }}
          {%- endif %}
        mountpoint: "{{ map_item.mountpoint }}"
        volume_group: "vg_{{ map_item.name }}"
        volume_name: "lv_{{ map_item.name }}"
        device: |-
          {% for entry in filesystem_device_map %}
            {%- if map_item.name == entry.name -%}
              {{ entry.device }}
            {%- endif %}
          {%- endfor %}
        pesize: "{{ map_item.lvm_vg_physical_extent_size | default('4') }}"
        pv_opts: "{{ map_item.lvm_pv_options | default('') }}"
        vg_opts: "{{ map_item.lvm_vg_options | default('') }}"
        lv_opts: |-
          {% set lvopts = [] %}
          {% if map_item.lvm_lv_stripes is defined and
                map_item.lvm_lv_stripes | int > 0 -%}
            {% set addopt = lvopts.append('--stripes ' + map_item.lvm_lv_stripes | string) %}
          {%- endif %}
          {% if map_item.lvm_lv_stripe_size is defined and
                map_item.lvm_lv_stripe_size | length > 0 -%}
            {% set addopt = lvopts.append('--stripesize ' + map_item.lvm_lv_stripe_size) %}
          {%- endif %}
          {{ lvopts | join(' ') }}
  loop: "{{ sap_storage_definition }}"
  loop_control:
    label: "{{ map_item.name }}"
    loop_var: map_item

#- debug:
#    var: volume_map

################
# Main Run - call cloud specific tasks thru {{ sap_storage_cloud_type }}_tasks/prep_storage.yml
################

- name: SAP Storage Setup - Configure Volume Groups and Logical Volumes
  include_tasks: "{{ sap_storage_cloud_type }}_tasks/configure_filesystems.yml"
