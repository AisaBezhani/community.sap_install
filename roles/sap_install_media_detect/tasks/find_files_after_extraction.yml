---

- name: SAP Install Media Detect - Find files after extraction - Set fact for SAP kernel files
  ansible.builtin.set_fact:
    sap_swpm_software_path: "{{ __sap_install_media_detect_software_main_directory }}/sap_swpm" # for setting consecutive vars
  ignore_errors: true

- name: SAP Install Media Detect - Find files after extraction - Find SAPCAR
  ansible.builtin.shell: ls SAPCAR*.EXE
  args:
    chdir: "{{ sap_install_media_detect_directory }}"
  register: sap_swpm_sapcar_file_name_get
  changed_when: false

- name: SAP Install Media Detect - Find files after extraction - Find SAP_HANA_CLIENT for SAP SWPM
  ansible.builtin.find:
    paths: "{{ __sap_install_media_detect_software_main_directory }}"
    recurse: true
    file_type: directory
    patterns: "SAP_HANA_CLIENT"
  register: sap_hana_client_path
  ignore_errors: true
  when: sap_install_media_detect_db == "saphana"

- name: SAP Install Media Detect - Find files after extraction - Find IBM Db2
  ansible.builtin.find:
    paths: "{{ __sap_install_media_detect_software_main_directory }}/ibmdb2_extracted"
    recurse: true
    file_type: directory
    patterns: ".*LINUXX86_64.*"
    use_regex: true
  register: detect_directory_ibmdb2_extracted
  when: sap_install_media_detect_db == "ibmdb2"

- name: SAP Install Media Detect - Find files after extraction - Find IBM Db2 Client
  ansible.builtin.find:
    paths: "{{ __sap_install_media_detect_software_main_directory }}/ibmdb2_client_extracted"
    recurse: true
    file_type: directory
    patterns: ".*DATA_UNITS.*"
    use_regex: true
  register: detect_directory_ibmdb2_client_extracted
  when: sap_install_media_detect_db == "ibmdb2"

- name: SAP Install Media Detect - Find files after extraction - Find Oracle DB
  ansible.builtin.find:
    paths: "{{ __sap_install_media_detect_software_main_directory }}/oracledb_extracted"
    recurse: true
    file_type: directory
    patterns: ".*LINUX_X86_64.*"
    use_regex: true
  register: detect_directory_oracledb_extracted
  when: sap_install_media_detect_db == "oracledb"

- name: SAP Install Media Detect - Find files after extraction - Find Oracle DB Client
  ansible.builtin.find:
    paths: "{{ __sap_install_media_detect_software_main_directory }}/oracledb_client_extracted"
    recurse: true
    file_type: directory
    patterns: ".*OCL_LINUX_X86_64.*"
    use_regex: true
  register: detect_directory_oracledb_client_extracted
  when: sap_install_media_detect_db == "oracledb"

- name: SAP Install Media Detect - Find files after extraction - Find SAP ASE
  ansible.builtin.find:
    paths: "{{ __sap_install_media_detect_software_main_directory }}/sapase_extracted"
    recurse: true
    file_type: directory
    patterns: ".*SYBASE_LINUX.*"
    use_regex: true
  register: detect_directory_sapase_extracted
  when: sap_install_media_detect_db == "sapase"

- name: SAP Install Media Detect - Find files after extraction - Find SAP ASE Client
  ansible.builtin.find:
    paths: "{{ __sap_install_media_detect_software_main_directory }}/sapase_client_extracted"
    recurse: true
    file_type: file
    patterns: ".*sybodbc.*"
    use_regex: true
  register: detect_directory_sapase_client_extracted
  when: sap_install_media_detect_db == "sapase"

- name: SAP Install Media Detect - Find files after extraction - Find SAP MaxDB
  ansible.builtin.find:
    paths: "{{ __sap_install_media_detect_software_main_directory }}/sapmaxdb_extracted/"
    recurse: true
    file_type: directory
    patterns: '.*MaxDB_7.9.*'
    use_regex: true
  register: detect_directory_sapmaxdb_extracted
  when: sap_install_media_detect_db == "sapmaxdb"

- debug:
    msg: "sap_swpm_software_path - {{ sap_swpm_software_path }}"

- name: SAP Install Media Detect - Find files after extraction - Find SAPEXEDB
  ansible.builtin.shell: |
    ls SAPEXEDB_*.SAR
  args:
    chdir: "{{ sap_swpm_software_path }}"
  register: sap_swpm_kernel_dependent_file_name_get
  when: sap_install_media_detect_kernel

- name: SAP Install Media Detect - Find files after extraction - Find SAPEXE
  ansible.builtin.shell: |
    ls SAPEXE_*.SAR
  args:
    chdir: "{{ sap_swpm_software_path }}"
  register: sap_swpm_kernel_independent_file_name_get
  when: sap_install_media_detect_kernel

- name: SAP Install Media Detect - Find files after extraction - Find IGS
  ansible.builtin.shell: |
    ls igsexe*.sar
  args:
    chdir: "{{ sap_swpm_software_path }}"
  register: sap_swpm_igs_file_name_get
  when: sap_install_media_detect_igs

- name: SAP Install Media Detect - Find files after extraction - Find IGS Helper
  ansible.builtin.shell: |
    ls igshelper*.sar
  args:
    chdir: "{{ sap_swpm_software_path }}"
  register: sap_swpm_igs_helper_file_name_get
  when: sap_install_media_detect_igs

- name: SAP Install Media Detect - Find files after extraction - Find WEBDISP
  ansible.builtin.shell: |
    ls SAPWEBDISP_*.SAR
  args:
    chdir: "{{ sap_swpm_software_path }}"
  register: sap_swpm_web_dispatcher_file_name_get
  ignore_errors: true
  when: sap_install_media_detect_webdisp

- name: SAP Install Media Detect - Find files after extraction - Find SAP ECC Export
  ansible.builtin.find:
    paths: "{{ __sap_install_media_detect_software_main_directory }}/sapecc_export_extracted"
    recurse: true
    file_type: directory
    patterns: '.*DATA_UNITS.*'
    use_regex: true
  register: detect_directory_export_extracted
  when: sap_install_media_detect_export == "sapecc"

- name: SAP Install Media Detect - Find files after extraction - Find SAP ECC IDES Export
  ansible.builtin.find:
    paths: "{{ __sap_install_media_detect_software_main_directory }}/sapecc_ides_export_extracted"
    recurse: true
    file_type: directory
    patterns: '.*EXP.*'
    use_regex: true
  register: detect_directory_export_extracted
  when: sap_install_media_detect_export == "sapecc_ides"

- name: SAP Install Media Detect - Find files after extraction - Find SAP S/4HANA Export
  ansible.builtin.find:
    paths: "{{ sap_install_media_detect_source_directory }}"
    recurse: true
    file_type: file
    patterns: '.*S4.*EXPORT.*'
    use_regex: true
  register: s4hana_export_files
  when: sap_install_media_detect_export == "saps4hana"

- name: SAP Install Media Detect - Find files after extraction - Find SAP BW/4HANA Export
  ansible.builtin.find:
    paths: "{{ sap_install_media_detect_target_directory }}"
    recurse: true
    file_type: file
    patterns: '.*BW4.*EXPORT.*'
    use_regex: true
  register: bw4hana_export_files
  when: sap_install_media_detect_export == "sapbw4hana"

- name: SAP Install Media Detect - Find files after extraction - Find SAP NetWeaver AS (ABAP) platform only Export
  ansible.builtin.find:
    paths: "{{ __sap_install_media_detect_software_main_directory }}/sap_nwas_abap_export_extracted"
    recurse: true
    file_type: directory
    patterns: '.*DATA_UNITS.*'
    use_regex: true
  register: detect_directory_export_extracted
  when: sap_install_media_detect_export == "sapnwas_abap"

- name: SAP Install Media Detect - Find files after extraction - Find SAP NetWeaver AS (JAVA) platform only Export
  ansible.builtin.find:
    paths: "{{ __sap_install_media_detect_software_main_directory }}/sap_nwas_java_export_extracted"
    recurse: true
    file_type: directory
    patterns: '.*DATA_UNITS.*'
    use_regex: true
  register: detect_directory_export_extracted
  when: sap_install_media_detect_export == "sapnwas_java"

- name: SAP Install Media Detect - Find files after extraction - Find SAP Solution Manager (ABAP) platform only Export
  ansible.builtin.find:
    paths: "{{ __sap_install_media_detect_software_main_directory }}/sapsolman_abap_export_extracted"
    recurse: true
    file_type: directory
    patterns: '.*DATA_UNITS.*'
    use_regex: true
  register: detect_directory_export_extracted
  when: sap_install_media_detect_export == "sapsolman_abap"
