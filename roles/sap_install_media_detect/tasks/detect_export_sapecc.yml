---

- name: List files in directory
  ansible.builtin.shell: ls -1
  register: detect_directory_files
  args:
    chdir: "{{ sap_install_media_detect_directory }}"

- name: Detect ZIP files (including no file extensions), ignore errors
  ansible.builtin.shell: if [ ! -z "$(file {{ item }} | grep 'Zip archive data')" ]; then echo {{ item }}; fi
  register: detect_directory_files_zip
#  changed_when: "item.stdout | length > 0"
  with_items: 
    - "{{ detect_directory_files.stdout_lines }}"
  args:
    chdir: "{{ sap_install_media_detect_directory }}"
  ignore_errors: true

- name: Detect RAR files (including no file extensions), ignore errors
  ansible.builtin.shell: if [ ! -z "$(file {{ item }} | grep 'RAR')" ]; then echo {{ item }}; fi
  register: detect_directory_files_rar
#  changed_when: "item.stdout | length > 0"
  with_items: 
    - "{{ detect_directory_files.stdout_lines }}"
  args:
    chdir: "{{ sap_install_media_detect_directory }}"
  ignore_errors: true

- name: Identify SAP ECC EXPORT files
  ansible.builtin.shell: |
    if [ ! -z "$(file {{ item }} | grep 'Zip archive data')" ]; then if zipinfo -1 {{ item }} | grep -q 'DATA_UNITS/EXPORT_' ; then echo '{{ item }}' ; fi ;
    elif [ ! -z "$(file {{ item }} | grep 'RAR')" ]; then if ../unrar lb {{ item }} | grep -q 'DATA_UNITS/EXPORT_' ; then echo '{{ item }}' ; fi ; fi
  register: detect_directory_files_ecc_export
  changed_when: "item | length > 0"
  with_items: 
    - "{{ detect_directory_files_zip.results | map(attribute='stdout') | select() }}"
    - "{{ detect_directory_files_rar.results | map(attribute='stdout') | select() }}"
  args:
    chdir: "{{ sap_install_media_detect_directory }}"

- name: If any ZIP, then extract the SAP ECC Installation Export file (unzip)
  ansible.builtin.shell: if [ ! -z "$(file {{ item }} | grep 'Zip archive data')" ]; then unzip {{ item }}; fi
  with_items: 
    - "{{ detect_directory_files_ecc_export.results | map(attribute='stdout') | select() }}"
  args:
    chdir: "{{ sap_install_media_detect_directory }}"

- name: If any RAR without file extension, then add file extension (for use with unrar binary)
  ansible.builtin.shell: if [ ! -z "$(file {{ item }} | grep 'RAR archive data')" ]; then filename="{{ item }}" && if [ "${filename##*.}" != "rar" ]; then mv {{ item }} {{ item }}.rar ; fi ; fi
  with_items: 
    - "{{ detect_directory_files_ecc_export.results | map(attribute='stdout') | select() }}"
  args:
    chdir: "{{ sap_install_media_detect_directory }}"

- name: Find self-extracting RAR EXE (parent RAR file) and extract SAP ECC Installation Export files (unrar x)
  ansible.builtin.shell: if [ ! -z "$(file {{ item }} | grep 'RAR self-extracting archive')" ]; then "{{ sap_install_media_detect_unrar_binary }}" x "{{ item }}" sapecc_export_extracted/ ; fi
  with_items: 
    - "{{ detect_directory_files_ecc_export.results | map(attribute='stdout') | select() }}"
  args:
    chdir: "{{ sap_install_media_detect_directory }}"

- name: Identify SAP ECC Export extracted
  find:
    paths: "{{ sap_install_media_detect_directory }}/sapecc_export_extracted"
    recurse: yes
    file_type: directory
    contains: "DATA_UNITS"
  register: detect_directory_export_extracted

- name: Local Directory source - move SAP ECC EXPORT compressed archive files
  command: mv "{{ sap_install_media_detect_directory }}/{{ item }}" "{{ sap_install_media_detect_directory }}/sapecc_export/{{ item }}"
  with_items: 
    - "{{ detect_directory_files_ecc_export.results | map(attribute='stdout') | select() }}"
  when:
    - sap_install_media_detect_source == "local_dir"
