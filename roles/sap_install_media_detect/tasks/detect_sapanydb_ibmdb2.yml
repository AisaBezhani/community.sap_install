---

- name: SAP Install Media Detect - IBM Db2 - Set fact for install media directory
  set_fact:
    ibmdb2_install_directory: "{{ sap_install_media_detect_directory }}/ibmdb2"
    ibmdb2_client_install_directory: "{{ sap_install_media_detect_directory }}/ibmdb2_client"

- name: SAP Install Media Detect - IBM Db2 - Create Directories
  ansible.builtin.file:
    path: "{{ item }}"
    state: directory
    mode: '0755'
    owner: root
    group: root
  with_items:
    - "{{ ibmdb2_install_directory }}"
    - "{{ ibmdb2_client_install_directory }}"

- name: List files in directory
  ansible.builtin.shell: ls -1
  register: detect_directory_files
  args:
    chdir: "{{ sap_install_media_detect_directory }}"

- name: Detect ZIP files (including no file extensions), ignore errors
  ansible.builtin.shell: if [ ! -z "$(file {{ item }} | grep 'Zip archive data')" ]; then echo {{ item }}; fi
  register: detect_directory_files_zip
#  changed_when: "item.stdout | length > 0"
  with_items: 
    - "{{ detect_directory_files.stdout_lines }}"
  args:
    chdir: "{{ sap_install_media_detect_directory }}"
  ignore_errors: true

- name: Identify IBM Db2 installation media
  ansible.builtin.shell: |
    if [ ! -z "$(file {{ item }} | grep 'Zip archive data')" ]; then if zipinfo -1 {{ item }} | grep -q 'db2setup' ; then echo '{{ item }}' ; fi ; fi
  register: detect_directory_files_ibmdb2
  changed_when: "item | length > 0"
  with_items: 
    - "{{ detect_directory_files_zip.results | map(attribute='stdout') | select() }}"
  args:
    chdir: "{{ sap_install_media_detect_directory }}"

- name: Identify IBM Db2 Client installation media
  ansible.builtin.shell: |
    if [ ! -z "$(file {{ item }} | grep 'Zip archive data')" ]; then if zipinfo -1 {{ item }} | grep -q 'db6_update_client.sh' ; then echo '{{ item }}' ; fi ; fi
  register: detect_directory_files_ibmdb2_client
  changed_when: "item | length > 0"
  with_items: 
    - "{{ detect_directory_files_zip.results | map(attribute='stdout') | select() }}"
  args:
    chdir: "{{ sap_install_media_detect_directory }}"

- name: Identify IBM Db2 OEM license file
  ansible.builtin.shell: |
    if [ ! -z "$(file {{ item }} | grep 'Zip archive data')" ]; then if zipinfo -1 {{ item }} | grep -q 'db2aese_c.lic' ; then echo '{{ item }}' ; fi ; fi
  register: detect_directory_files_ibmdb2_license
  changed_when: "item | length > 0"
  with_items: 
    - "{{ detect_directory_files_zip.results | map(attribute='stdout') | select() }}"
  args:
    chdir: "{{ sap_install_media_detect_directory }}"

- name: Extract ZIP files of IBM DB2 installation media
  ansible.builtin.shell: if [ ! -z "$(file {{ item }} | grep 'Zip archive data')" ]; then unzip {{ item }} -d {{ ibmdb2_install_directory }}/{{ item }}_extracted; fi
  with_items: 
    - "{{ detect_directory_files_ibmdb2.results | map(attribute='stdout') | select() }}"
  args:
    chdir: "{{ sap_install_media_detect_directory }}"

- name: Extract ZIP files of IBM DB2 Client installation media
  ansible.builtin.shell: if [ ! -z "$(file {{ item }} | grep 'Zip archive data')" ]; then unzip {{ item }} -d {{ ibmdb2_install_directory }}/{{ item }}_extracted; fi
  with_items: 
    - "{{ detect_directory_files_ibmdb2_client.results | map(attribute='stdout') | select() }}"
  args:
    chdir: "{{ sap_install_media_detect_directory }}"

- name: Extract ZIP files of IBM DB2 OEM license file
  ansible.builtin.shell: if [ ! -z "$(file {{ item }} | grep 'Zip archive data')" ]; then unzip {{ item }} -d {{ ibmdb2_install_directory }}/{{ item }}_extracted; fi
  with_items: 
    - "{{ detect_directory_files_ibmdb2_license.results | map(attribute='stdout') | select() }}"
  args:
    chdir: "{{ sap_install_media_detect_directory }}"
