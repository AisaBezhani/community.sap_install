---

- name: SAP Install Media Detect - Oracle DB - Get info of directory 'oracledb_extracted'
  ansible.builtin.stat:
    path: "{{ __sap_install_media_detect_software_main_directory }}/oracledb_extracted/"
  register: __sap_install_media_detect_oracledb_extracted_stat

- name: SAP Install Media Detect - Oracle DB - Ensure directory 'oracledb_extracted' is absent
  ansible.builtin.file:
    path: "{{ __sap_install_media_detect_software_main_directory }}/oracledb_extracted/"
    state: absent
  when:
    - not sap_install_media_detect_skip_extraction_if_target_dir_exists

- name: SAP Install Media Detect - Oracle DB - Get info of directory 'oracledb_client_extracted'
  ansible.builtin.stat:
    path: "{{ __sap_install_media_detect_software_main_directory }}/oracledb_client_extracted/"
  register: __sap_install_media_detect_oracledb_client_extracted_stat

- name: SAP Install Media Detect - Oracle DB - Ensure directory 'oracledb_client_extracted' is absent
  ansible.builtin.file:
    path: "{{ __sap_install_media_detect_software_main_directory }}/oracledb_client_extracted/"
    state: absent
  when:
    - not sap_install_media_detect_skip_extraction_if_target_dir_exists

- name: SAP Install Media Detect - Oracle DB - Ensure directories exist
  ansible.builtin.file:
    path: "{{ item }}"
    state: directory
    mode: '0755'
    owner: root
    group: root
  with_items:
    - "{{ __sap_install_media_detect_software_main_directory }}/oracledb/"
    - "{{ __sap_install_media_detect_software_main_directory }}/oracledb_extracted/"
    - "{{ __sap_install_media_detect_software_main_directory }}/oracledb_client_extracted/"

- name: SAP Install Media Detect - Oracle DB - List files in source directory
  ansible.builtin.command: find . -maxdepth 1 -type f
  register: detect_directory_files
  args:
    chdir: "{{ sap_install_media_detect_source_directory }}"
  changed_when: false

- name: SAP Install Media Detect - Oracle DB - Detect ZIP files (including no file extensions), ignore errors
  ansible.builtin.shell: set -o pipefail && if [ ! -z "$(file {{ item }} | grep 'Zip archive data')" ]; then echo {{ item }}; fi
  register: detect_directory_files_zip
  with_items:
    - "{{ detect_directory_files.stdout_lines }}"
  args:
    chdir: "{{ sap_install_media_detect_source_directory }}"
  ignore_errors: true
  changed_when: false

# Reason for noqa: grep -q with pipefail shell option returns 141 instead of 0
- name: SAP Install Media Detect - Oracle DB - Identify Oracle DB installation media # noqa risky-shell-pipe
  ansible.builtin.shell: |
    if [ ! -z "$(file {{ item }} | grep 'Zip archive data')" ]; then if zipinfo -1 {{ item }} | grep -q '19cinstall.sh' ; then echo '{{ item }}' ; fi ; fi
  register: detect_directory_files_oracledb
  changed_when: "item | length > 0"
  with_items:
    - "{{ detect_directory_files_zip.results | map(attribute='stdout') | select() }}"
  args:
    chdir: "{{ sap_install_media_detect_source_directory }}"

# Reason for noqa: grep -q with pipefail shell option returns 141 instead of 0
- name: SAP Install Media Detect - Oracle DB - Identify Oracle DB Client installation media # noqa risky-shell-pipe
  ansible.builtin.shell: |
    if [ ! -z "$(file {{ item }} | grep 'Zip archive data')" ]; then if zipinfo -1 {{ item }} | grep -q 'OCL_LINUX_X86_64' ; then echo '{{ item }}' ; fi ; fi
  register: detect_directory_files_oracledb_client
  changed_when: "item | length > 0"
  with_items:
    - "{{ detect_directory_files_zip.results | map(attribute='stdout') | select() }}"
  args:
    chdir: "{{ sap_install_media_detect_source_directory }}"

- name: SAP Install Media Detect - Oracle DB - Copy Oracle DB files to {{ sap_install_media_detect_target_directory }}
  ansible.builtin.copy:
    src: "{{ sap_install_media_detect_source_directory }}/{{ line_item }}"
    dest: "{{ sap_install_media_detect_target_directory }}/{{ line_item }}"
    remote_src: true
  with_items:
    - "{{ detect_directory_files_oracledb.results | map(attribute='stdout') | select() }}"
    - "{{ detect_directory_files_oracledb_client.results | map(attribute='stdout') | select() }}"
  loop_control:
    loop_var: line_item
  when: sap_install_media_detect_source == 'remote_dir'

# Reason for noqa: Difficult to determine the change status in the shell command sequence
- name: SAP Install Media Detect - Oracle DB - Extract ZIP files of Oracle DB installation media # noqa no-changed-when
  ansible.builtin.shell: set -o pipefail && if [ ! -z "$(file {{ item }} | grep 'Zip archive data')" ]; then unzip {{ item }} -d {{ __sap_install_media_detect_software_main_directory }}/oracledb_extracted/{{ item }}_extracted; fi
  with_items:
    - "{{ detect_directory_files_oracledb.results | map(attribute='stdout') | select() }}"
  args:
    chdir: "{{ __sap_install_media_detect_software_main_directory }}"
  when: (not __sap_install_media_detect_oracledb_extracted_stat.stat.exists) or
        (    __sap_install_media_detect_oracledb_extracted_stat.stat.exists and not
             sap_install_media_detect_skip_extraction_if_target_dir_exists)

# Reason for noqa: Difficult to determine the change status in the shell command sequence
- name: SAP Install Media Detect - Oracle DB - Extract ZIP files of Oracle DB Client installation media # noqa no-changed-when
  ansible.builtin.shell: set -o pipefail && if [ ! -z "$(file {{ item }} | grep 'Zip archive data')" ]; then unzip {{ item }} -d {{ __sap_install_media_detect_software_main_directory }}/oracledb_client_extracted/{{ item }}_extracted; fi
  with_items:
    - "{{ detect_directory_files_oracledb_client.results | map(attribute='stdout') | select() }}"
  args:
    chdir: "{{ __sap_install_media_detect_software_main_directory }}"
  when: (not __sap_install_media_detect_oracledb_client_extracted_stat.stat.exists) or
        (    __sap_install_media_detect_oracledb_client_extracted_stat.stat.exists and not
             sap_install_media_detect_skip_extraction_if_target_dir_exists)

- name: SAP Install Media Detect - Oracle DB - Identify Oracle DB extracted
  ansible.builtin.find:
    paths: "{{ __sap_install_media_detect_software_main_directory }}/oracledb_extracted"
    recurse: true
    file_type: directory
    patterns: ".*LINUX_X86_64.*"
    use_regex: true
  register: detect_directory_oracledb_extracted

- name: SAP Install Media Detect - Oracle DB - Identify Oracle DB Client extracted
  ansible.builtin.find:
    paths: "{{ __sap_install_media_detect_software_main_directory }}/oracledb_client_extracted"
    recurse: true
    file_type: directory
    patterns: ".*OCL_LINUX_X86_64.*"
    use_regex: true
  register: detect_directory_oracledb_client_extracted

- name: SAP Install Media Detect - Oracle DB - Move Oracle DB compressed archive files
  ansible.builtin.command: mv "{{ __sap_install_media_detect_software_main_directory }}/{{ item }}" "{{ __sap_install_media_detect_software_main_directory }}/oracledb/{{ item }}"
  with_items:
    - "{{ detect_directory_files_oracledb.results | map(attribute='stdout') | select() }}"
    - "{{ detect_directory_files_oracledb_client.results | map(attribute='stdout') | select() }}"
