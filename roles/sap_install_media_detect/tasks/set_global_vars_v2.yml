---

- name: SAP Install Media Detection Completed - Set facts for SAP HANA
  ansible.builtin.set_fact:
    sap_hana_install_software_directory: "{{ sap_hana_install_directory }}" # for sap_hana_install Ansible Role
    sap_hana_install_software_extract_directory: "{{ sap_hana_install_directory }}/extracted" # for sap_hana_install Ansible Role
    sap_swpm_cd_rdms_path: "{{ sap_hana_client_path.files[0].path }}" # for sap_swpm Ansible Role # <--- TODO
  ignore_errors: true
  when: sap_install_media_detect_db == "saphana"

- name: SAP Install Media Detect - IBM Db2 - Identify IBM Db2 extracted
  ansible.builtin.find:
    paths: "{{ __sap_install_media_detect_software_main_directory }}/sap_db_db2_extracted"
    recurse: true
    file_type: directory
    patterns: ".*LINUXX86_64.*"
    use_regex: true
  register: detect_directory_ibmdb2_extracted
  when: sap_install_media_detect_db == "ibmdb2"

- name: SAP Install Media Detect - IBM Db2 - Identify IBM Db2 Client extracted
  ansible.builtin.find:
    paths: "{{ __sap_install_media_detect_software_main_directory }}/sap_db_db2_client_extracted"
    recurse: true
    file_type: directory
    patterns: ".*DATA_UNITS.*"
    use_regex: true
  register: detect_directory_ibmdb2_client_extracted
  when: sap_install_media_detect_db == "ibmdb2"

- name: SAP Install Media Detection Completed - Set facts for IBM Db2
  ansible.builtin.set_fact:
    sap_swpm_cd_ibmdb2_path: "{{ detect_directory_ibmdb2_extracted.files[0].path }}" # for sap_swpm Ansible Role
    sap_swpm_cd_ibmdb2_client_path: "{{ detect_directory_ibmdb2_client_extracted.files[0].path }}" # for sap_swpm Ansible Role
  ignore_errors: true
  when: sap_install_media_detect_db == "ibmdb2"

- name: SAP Install Media Detection Completed - Set facts for Oracle DB # <--- TODO
  ansible.builtin.set_fact:
    sap_anydb_install_oracle_extract_path: "{{ detect_directory_oracledb_extracted.files[0].path }}" # for sap_anydb_install_oracle Ansible Role
    sap_swpm_cd_oracle_path: "{{ detect_directory_oracledb_extracted.files[0].path }}" # for sap_swpm Ansible Role
    sap_swpm_cd_oracle_client_path: "{{ detect_directory_oracledb_client_extracted.files[0].path }}" # for sap_swpm Ansible Role
  ignore_errors: true
  when: sap_install_media_detect_db == "oracledb"

- name: SAP Install Media Detection Completed - Set facts for SAP ASE # <--- TODO
  ansible.builtin.set_fact:
    sap_swpm_cd_sapase_path: "{{ detect_directory_sapase_extracted.files[0].path }}" # for sap_swpm Ansible Role
    sap_swpm_cd_sapase_client_path: "{{ detect_directory_sapase_client_extracted.files[0].path }}" # for sap_swpm Ansible Role
  ignore_errors: true
  when: sap_install_media_detect_db == "sapase"

- name: SAP Install Media Detection Completed - Set facts for SAP MaxDB # <--- TODO
  ansible.builtin.set_fact:
    sap_swpm_cd_sapmaxdb_path: "{{ detect_directory_sapmaxdb_extracted.files[0].path }}" # for sap_swpm Ansible Role
  ignore_errors: true
  when: sap_install_media_detect_db == "sapmaxdb"

- name: SAP Install Media Detection Completed - Set facts for Export of SAP ECC # <--- TODO
  ansible.builtin.set_fact:
    sap_swpm_cd_export_path: "{{ detect_directory_export_extracted.files[0].path }}" # for sap_swpm Ansible Role
  ignore_errors: true
  when: sap_install_media_detect_export == "sapecc"

- name: SAP Install Media Detection Completed - Set facts for Export of SAP ECC IDES # <--- TODO
  ansible.builtin.set_fact:
    sap_swpm_cd_export_path: "{{ detect_directory_export_extracted.files[0].path | dirname | dirname }}" # for sap_swpm Ansible Role
    sap_swpm_cd_export_pt1_path: "{{ (detect_directory_export_extracted.files | map(attribute='path') | map('dirname') | list | select() | unique)[0] }}" # for sap_swpm Ansible Role
    sap_swpm_cd_export_pt2_path: "{{ (detect_directory_export_extracted.files | map(attribute='path') | map('dirname') | list | select() | unique)[1] }}" # for sap_swpm Ansible Role
  ignore_errors: true
  when: sap_install_media_detect_export == "sapecc_ides"

- name: SAP Install Media Detection Completed - Set facts for Export of SAP S/4HANA # <--- TODO
  ansible.builtin.set_fact:
    sap_swpm_cd_export_path: "{{ s4hana_export_files.files[0].path }}" # for sap_swpm Ansible Role
  ignore_errors: true
  when: sap_install_media_detect_export == "saps4hana"

- name: SAP Install Media Detection Completed - Set facts for Export of SAP BW/4HANA # <--- TODO
  ansible.builtin.set_fact:
    sap_swpm_cd_export_path: "{{ bw4hana_export_files.files[0].path }}" # for sap_swpm Ansible Role
  ignore_errors: true
  when: sap_install_media_detect_export == "sapbw4hana"

- name: SAP Install Media Detect - SAP NetWeaver AS (ABAP) platform only EXPORT - Identify EXPORT extracted
  ansible.builtin.find:
    paths: "{{ __sap_install_media_detect_software_main_directory }}/sap_nwas_abap_export_extracted"
    recurse: true
    file_type: directory
    patterns: '.*DATA_UNITS.*'
    use_regex: true
  register: detect_directory_export_extracted
  when: sap_install_media_detect_export == "sapnwas_abap"

- name: SAP Install Media Detection Completed - Set facts for Export of SAP NetWeaver AS (ABAP) platform only
  ansible.builtin.set_fact:
    sap_swpm_cd_export_path: "{{ detect_directory_export_extracted.files[0].path }}" # for sap_swpm Ansible Role
  ignore_errors: true
  when: sap_install_media_detect_export == "sapnwas_abap"

- name: SAP Install Media Detect - SAP NetWeaver AS (JAVA) platform only EXPORT - Identify EXPORT extracted
  ansible.builtin.find:
    paths: "{{ __sap_install_media_detect_software_main_directory }}/sap_nwas_java_export_extracted"
    recurse: true
    file_type: directory
    patterns: '.*DATA_UNITS.*'
    use_regex: true
  register: detect_directory_export_extracted
  when: sap_install_media_detect_export == "sapnwas_java"

- name: SAP Install Media Detection Completed - Set facts for Export of SAP NetWeaver AS (JAVA) platform only
  ansible.builtin.set_fact:
    sap_swpm_cd_export_path: "{{ detect_directory_export_extracted.files[0].path }}" # for sap_swpm Ansible Role
  ignore_errors: true
  when: sap_install_media_detect_export == "sapnwas_java"

- name: SAP Install Media Detection Completed - Set facts for Export of SAP Solution Manager (ABAP) # <--- TODO
  ansible.builtin.set_fact:
    sap_swpm_cd_export_path: "{{ detect_directory_export_extracted.files[0].path | dirname | dirname }}" # for sap_swpm Ansible Role
    sap_swpm_cd_export_pt1_path: "{{ detect_directory_export_extracted.files[0].path }}" # for sap_swpm Ansible Role
    sap_swpm_cd_export_pt2_path: "{{ detect_directory_export_extracted.files[1].path }}" # for sap_swpm Ansible Role
  ignore_errors: true
  when:
    - sap_install_media_detect_export == "sapsolman_abap"

- name: SAP Install Media Detection Completed - Set facts for SAP SWPM
  ansible.builtin.set_fact:
    sap_swpm_sapcar_path: "{{ __sap_install_media_detect_software_main_directory }}/sap_swpm" # for sap_swpm Ansible Role
  ignore_errors: true
  when: sap_install_media_detect_swpm

- name: SAP Install Media Detection Completed - Set fact for displaying all variables
  ansible.builtin.set_fact:
    __sap_install_media_detect_vars="{{ __sap_install_media_detect_vars | d('') + item + ' = >' + lookup('vars', item, default='') + '<\n' }}"
  loop:
    - sap_hana_install_software_directory
    - sap_hana_install_software_extract_directory
    - sap_swpm_cd_rdms_path
    - sap_swpm_cd_ibmdb2_path
    - sap_swpm_cd_ibmdb2_client_path
    - sap_anydb_install_oracle_extract_path
    - sap_swpm_cd_oracle_path
    - sap_swpm_cd_oracle_client_path
    - sap_swpm_cd_sapase_path
    - sap_swpm_cd_sapase_client_path
    - sap_swpm_cd_sapmaxdb_path
    - sap_swpm_cd_export_path
    - sap_swpm_cd_export_pt1_path
    - sap_swpm_cd_export_pt2_path
    - sap_swpm_sapcar_path

- name: SAP Install Media Detection Completed - Display all variables
  ansible.builtin.debug:
    msg: "{{ __sap_install_media_detect_vars.split('\n')[:-1] }}"
